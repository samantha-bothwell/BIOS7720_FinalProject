library(kableExtra)
library(tidyverse)
library(table1)
load("D:/CU/Thesis/Clustering/Data/SimData.RData")
#### function for rolling probabilities
roll_avg = function(x, window = 14){
roll_mat = matrix(nrow = dim(x)[1], ncol = dim(x)[2])
for(i in 1:dim(x)[1]){
roll_mat[i,] = roll_sum(x[i,], width = window, min_obs = 1)/window
}
return(roll_mat)
}
bin_times = data.frame("Jaccard" = jac_time, "DTW" = dtw_time$time[dtw_time$values == "binary"],
"Euclidean" = euc_time$time[euc_time$values == "binary"])
bin_times = bin_times %>%
pivot_longer(cols = 1:3, names_to = "Distance", values_to = "Time (seconds)")
# Format table
my.render.cont <- function(x) {
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Median [25%, 75%]"=sprintf("%s [%s, %s]",
MEDIAN, round(summary(x)[2],2), round(summary(x)[5],2))))
}
table1(~ `Time (seconds)` | `Distance`,
render.continuous = my.render.cont, data = bin_times, overall = FALSE)
cont_time = data.frame("Window" = rep(c(7, 14, 30), each = 1000),
"DTW" = c(dtw_time$time[dtw_time$values == 7], dtw_time$time[dtw_time$values == 14], dtw_time$time[dtw_time$values == 30]),
"Euclidean" = c(euc_time$time[dtw_time$values == 7], euc_time$time[dtw_time$values == 14], euc_time$time[dtw_time$values == 30]))
cont_time <- cont_time %>%
pivot_longer(cols = 2:3, names_to = "Distance", values_to = "Time (seconds)")
table1(~ `Time (seconds)` | `Window` + `Distance`,
render.continuous = my.render.cont, data = cont_time, overall = FALSE)
### Combine continuous DTW data
dtw_ext = cont_ext[cont_ext$Distance == "DTW",]
dtw_int = cont_int[cont_int$Distance == "DTW" & cont_int$Clusters == 5,]
# Update format
dtw_ext_long <- dtw_ext %>%
pivot_longer(cols = 5:9, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Window:Method` = paste0("Window", Window, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Window:Method`) %>%
pivot_wider(names_from = `Window:Method`, values_from = `Index`)
dtw_int_long <- dtw_int %>%
pivot_longer(cols = 6:9, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Window:Method` = paste0("Window", Window, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Window:Method`) %>%
pivot_wider(names_from = `Window:Method`, values_from = `Index`)
table1(~ . | `Validation Index`,
render.continuous = my.render.cont, data = dtw_ext_long, overall = FALSE)
table1(~ . | `Validation Index`,
render.continuous = my.render.cont, data = dtw_int_long, overall = FALSE)
dtw_ext_link <- dtw_ext %>%
pivot_longer(cols = 5:9, names_to = "Validation Index", values_to = "Index") %>%
select(`Seed`, `Window`, `Validation Index`, `Index`, `Method`) %>%
pivot_wider(names_from = `Method`, values_from = `Index`)
table1(~ `complete` + `average` + `single` + `ward.D` | `Validation Index`,
render.continuous = my.render.cont, data = dtw_ext_link, overall = FALSE)
dtw_ext_window <- dtw_ext %>%
pivot_longer(cols = 5:9, names_to = "Validation Index", values_to = "Index") %>%
select(`Seed`, `Window`, `Validation Index`, `Index`, `Method`) %>%
pivot_wider(names_from = `Window`, values_from = `Index`)
table1(~ `7` + `14` + `30` | `Validation Index`,
render.continuous = my.render.cont, data = dtw_ext_window, overall = FALSE)
dtw_ext_sing <- dtw_ext[dtw_ext$Method == "single",]
View(bin_ext)
View(dtw_ext)
dtw_ext_worst_link <- dtw_ext %>%
group_by(Method) %>%
filter(ARI = min(ARI))
dtw_ext_worst_link <- dtw_ext %>%
group_by(Method) %>%
filter(ARI == min(ARI))
View(dtw_ext_worst_link)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# libraries
library(kableExtra)
library(tidyverse)
library(table1)
library(ggplot2)
load("D:/CU/Thesis/Clustering/Data/SimData.RData")
#### function for rolling probabilities
roll_avg = function(x, window = 14){
roll_mat = matrix(nrow = dim(x)[1], ncol = dim(x)[2])
for(i in 1:dim(x)[1]){
roll_mat[i,] = roll_sum(x[i,], width = window, min_obs = 1)/window
}
return(roll_mat)
}
# Convert data to long format
dtw_ext_long <- dtw_ext %>%
pivot_longer(cols = 5:9, names_to = "Validation Index", values_to = "Index")
View(dtw_ext_long)
ggplot(dtw_ext, aes(x = `Validation Index`, y = Index, color = `Validation Index`)) +
stat_summary(mapping = aes(x = `Validation Index`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median)
ggplot(dtw_ext_long, aes(x = `Validation Index`, y = Index, color = `Validation Index`)) +
stat_summary(mapping = aes(x = `Validation Index`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median)
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
facet_grid(~`Validation Index`)
colnames(dtw_ext_long)[4] = "Linkage"
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
facet_grid(~`Validation Index`)
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
facet_grid(`Window`~`Validation Index`)
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
facet_grid(`Window`~`Validation Index`)
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
facet_grid(~`Validation Index`)
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median) +
facet_grid(~`Validation Index`)
?stat_summary
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 1) +
facet_grid(`Window`~`Validation Index`)
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 1) +
facet_grid(`Window`~`Validation Index`, labeller = label_both)
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Window`~`Validation Index`, labeller = label_both)
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Window`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none")
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Window`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none")
ggplot(dtw_ext_long, aes(x = `Linkage`, y = Index, color = `Linkage`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Window`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none", axis.text.x = element_text(angle = 90))
# Pull out 14 day window for DTW and EUC. Pull out binary Jaccard
ext_14 <- cont_ext[cont_ext$Window == 14, ]
View(ext_14)
ext_14 <- ext_14[,-3]
ext_jac <- bin_ext[bin_ext$Distance == "Jaccard",]
View(ext_jac)
# Merge
ext_14 <- data.frame(rbind(ext_14, ext_jac))
# Update format
ext_14_wide <- ext_14 %>%
pivot_longer(cols = 4:8, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Distance:Method` = paste0(Distance, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Distance:Method`) %>%
pivot_wider(names_from = `Distance:Method`, values_from = `Index`)
View(ext_14_wide)
# Update format
ext_14_wide <- ext_14 %>%
order_by(Linage) %>%
pivot_longer(cols = 4:8, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Distance:Method` = paste0(Distance, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Distance:Method`) %>%
pivot_wider(names_from = `Distance:Method`, values_from = `Index`)
# Update format
ext_14_wide <- ext_14 %>%
order_by(Linkage) %>%
pivot_longer(cols = 4:8, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Distance:Method` = paste0(Distance, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Distance:Method`) %>%
pivot_wider(names_from = `Distance:Method`, values_from = `Index`)
# Update format
ext_14_wide <- ext_14 %>%
order_by(Method) %>%
pivot_longer(cols = 4:8, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Distance:Method` = paste0(Distance, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Distance:Method`) %>%
pivot_wider(names_from = `Distance:Method`, values_from = `Index`)
# Update format
ext_14_wide <- ext_14 %>%
dplyr::order_by(Method) %>%
pivot_longer(cols = 4:8, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Distance:Method` = paste0(Distance, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Distance:Method`) %>%
pivot_wider(names_from = `Distance:Method`, values_from = `Index`)
# Update format
ext_14_wide <- ext_14 %>%
arrange(Method) %>%
pivot_longer(cols = 4:8, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Distance:Method` = paste0(Distance, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Distance:Method`) %>%
pivot_wider(names_from = `Distance:Method`, values_from = `Index`)
# Update format
ext_14_wide <- ext_14 %>%
arrange(factor(Method, levels = c("complete", "average", "single", "ward.D"))) %>%
pivot_longer(cols = 4:8, names_to = "Validation Index", values_to = "Index") %>%
mutate(`Distance:Method` = paste0(Distance, ":", Method)) %>%
select(`Seed`, `Validation Index`, `Index`, `Distance:Method`) %>%
pivot_wider(names_from = `Distance:Method`, values_from = `Index`)
dtw_ivi <- dtw_int[dtw_int$Window == 14 & dtw_int$Method %in% c("single", "average"),]
View(dtw_ivi)
dtw_ivi <- cont_int[cont_int$Distance == "DTW" & cont_int$Window == 14 & cont_int$Method %in% c("single", "average"),]
colnames(dtw_ivi)[6:9] <- c("Sil (+)", "D (+)", "DB (-)", "CH (+)")
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_long(cols = 6:9, names_to = `Validation Index`, values_to = `Index)
View(dtw_ext_long)
)
)
)
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = `Validation Index`, values_to = `Index)
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = `Validation Index`, values_to = `Index)
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = `Validation Index`, values_to = `Index`)
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = `Validation Index`, values_to = `Index`)
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = `Validation Index`, values_to = `Index`)
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = "Validation Index", values_to = "Index")
View(dtw_ivi_long)
# Plot
colnames(dtw_ivi_long)[5] = "Linkage"
ggplot(dtw_ext_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none", axis.text.x = element_text(angle = 90))
ggplot(dtw_ivi_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Linkage`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none", axis.text.x = element_text(angle = 90))
ggplot(dtw_ivi_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Clusters`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none", axis.text.x = element_text(angle = 90))
dtw_ivi_long$Clusters <- as.factor(dtw_ivi_long$Clusters)
ggplot(dtw_ivi_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Clusters`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none", axis.text.x = element_text(angle = 90))
dtw_ivi <- cont_int[cont_int$Distance == "DTW" & cont_int$Window == 14 & cont_int$Method %in% c("single", "average"),]
colnames(dtw_ivi)[6:9] <- c("Sil (+)", "D (+)", "DB (-)", "CH (+)")
# Log transform DB index
dtw_ivi$`DB (-)` = ln (dtw_ivi$`DB (-)` / (1 - dtw_ivi$`DB (-)`))
dtw_ivi <- cont_int[cont_int$Distance == "DTW" & cont_int$Window == 14 & cont_int$Method %in% c("single", "average"),]
colnames(dtw_ivi)[6:9] <- c("Sil (+)", "D (+)", "DB (-)", "CH (+)")
# Log transform DB index
dtw_ivi$`DB (-)` = log(dtw_ivi$`DB (-)` / (1 - dtw_ivi$`DB (-)`))
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = "Validation Index", values_to = "Index")
# Plot
colnames(dtw_ivi_long)[5] = "Linkage"
dtw_ivi_long$Clusters <- as.factor(dtw_ivi_long$Clusters)
ggplot(dtw_ivi_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Clusters`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none", axis.text.x = element_text(angle = 90))
dtw_ivi <- cont_int[cont_int$Distance == "DTW" & cont_int$Window == 14 & cont_int$Method %in% c("single", "average"),]
colnames(dtw_ivi)[6:9] <- c("Sil (+)", "D (+)", "DB (-)", "CH (+)")
# Log transform DB index
dtw_ivi$`DB (-)` = log(dtw_ivi$`DB (-)`)
dtw_ivi <- cont_int[cont_int$Distance == "DTW" & cont_int$Window == 14 & cont_int$Method %in% c("single", "average"),]
colnames(dtw_ivi)[6:9] <- c("Sil (+)", "D (+)", "DB (-)", "CH (+)")
dtw_ivi$`DB (-)` / (1 - dtw_ivi$`DB (-)`)
log(-1)
dtw_ivi <- cont_int[cont_int$Distance == "DTW" & cont_int$Window == 14 & cont_int$Method %in% c("single", "average"),]
colnames(dtw_ivi)[6:9] <- c("Sil (+)", "D (+)", "DB (-)", "CH (+)")
# Transform DB index
dtw_ivi$`DB (-)` = dtw_ivi$`DB (-)`/max(dtw_ivi$`DB (-)`)
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = "Validation Index", values_to = "Index")
# Plot
colnames(dtw_ivi_long)[5] = "Linkage"
dtw_ivi_long$Clusters <- as.factor(dtw_ivi_long$Clusters)
ggplot(dtw_ivi_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Clusters`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none", axis.text.x = element_text(angle = 90))
ggplot(dtw_ivi_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Clusters`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none", axis.text.x = element_text(angle = 90))
ggplot(dtw_ivi_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Clusters`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none")
View(dtw_ivi_long)
# Make long data set
dtw_ivi_long <- dtw_ivi_long %>%
select(`Seed`, `Validation Index`, `Index`, `Linkage`) %>%
pivot_wider(names_from = `Linkage`, values_from = `Index`)
dtw_ivi <- cont_int[cont_int$Distance == "DTW" & cont_int$Window == 14 & cont_int$Method %in% c("single", "average"),]
colnames(dtw_ivi)[6:9] <- c("Sil (+)", "D (+)", "DB (-)", "CH (+)")
# Transform DB index
dtw_ivi$`DB (-)` = dtw_ivi$`DB (-)`/max(dtw_ivi$`DB (-)`)
# Make long data set
dtw_ivi_long <- dtw_ivi %>%
pivot_longer(cols = 6:9, names_to = "Validation Index", values_to = "Index")
# Plot
colnames(dtw_ivi_long)[5] = "Linkage"
dtw_ivi_long$Clusters <- as.factor(dtw_ivi_long$Clusters)
ggplot(dtw_ivi_long, aes(x = `Clusters`, y = Index, color = `Clusters`)) +
stat_summary(mapping = aes(x = `Clusters`, y = Index),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median, size = 0.75) +
facet_grid(`Linkage`~`Validation Index`, labeller = label_both) +
theme(legend.position = "none")
# Make wide data set
dtw_ivi_wide <- dtw_ivi_long %>%
select(`Seed`, `Validation Index`, `Index`, `Linkage`, `Clusters`) %>%
pivot_wider(names_from = `Linkage`, values_from = `Index`)
View(dtw_ivi_wide)
rm(list = ls())
### Load packages
library(tidyverse)
library(stringr)
library(ggplot2)
library(refund)
library(mgcv)
library(lme4)
library(zoo)
### Load in cleaned data
step <- readRDS("D:/CU/Spring 2021/FDA/Final Project/BIOS7720_FinalProject/Data/DataProcessed/FitBit_steps_1AcademicYear_long.rds")
dem <- read.csv("D:/CU/Spring 2021/FDA/Final Project/BIOS7720_FinalProject/Data/DataProcessed/Demographics.csv")
step_wide <- readRDS("D:/CU/Spring 2021/FDA/Final Project/BIOS7720_FinalProject/Data/DataProcessed/FitBit_steps_1AcademicYear_wide.rds")
### Complete step day by including missing md values
step <- step %>%
mutate(md = as.numeric(md), datadate = as.Date(datadate, format = "%Y-%m-%d")) %>%
group_by(egoid, AcademicYr, days_yr, maxMissing) %>%
tidyr::complete(md = 1:366) %>%
mutate(sind = md/366)
### Fill in date
step$datadate <- as.Date(ifelse(step$AcademicYr == "2016-2017" & is.na(step$datadate),
as.Date("2016-08-01", format = "%Y-%m-%d")  + step$md - 1,
ifelse(step$AcademicYr == "2015-2016" & is.na(step$datadate),
as.Date("2015-08-01", format = "%Y-%m-%d")  + step$md - 1,
ifelse(step$AcademicYr == "2017-2018" & is.na(step$datadate),
as.Date("2017-08-01", format = "%Y-%m-%d")  + step$md - 1,
ifelse(step$AcademicYr == "2018-2019" & is.na(step$datadate),
as.Date("2018-08-01", format = "%Y-%m-%d")  + step$md - 1,step$datadate)))))
### Get day of week
step$dow <- weekdays(as.Date(step$datadate))
### Indicator for weekday
step$weekday <- ifelse(step$dow %in% c("Saturday", "Sunday"), 0, 1)
### Add college, gender, race, socio-economic status and BMI
step$College <- dem$College[match(step$egoid, dem$egoid)]
step$Gender <- dem$gender_1[match(step$egoid, dem$egoid)]
step$Race <- dem$race_1[match(step$egoid, dem$egoid)]
step$Income <- dem$Income[match(step$egoid, dem$egoid)]
step$BMI <- dem$BMI[match(step$egoid, dem$egoid)]
#######################################
### FPCA MODEL (TIME-VARYING TREND) ###
#######################################
# Fit a naive model not accounting for correlation
fit_naive <- bam(steps ~ s(sind, bs="cr",k=30) + College + Gender + Race + Income + weekday +
s(sind, by = BMI, bs="cr", k=30),
method="fREML", data=step, discrete=TRUE)
# Visualize the residuals
resid_mat <- matrix(fit_naive$residuals, length(unique(df_fit$ID)), ndays, byrow=TRUE)
# Visualize the residuals
resid_mat <- matrix(fit_naive$residuals, length(unique(step$egoid)), ndays, byrow=TRUE)
# Visualize the residuals
resid_mat <- matrix(fit_naive$residuals, length(unique(step$egoid)), 366, byrow=TRUE)
length(unique(step$egoid))
fit_naive$residual
80866/470
cor_mat <- cor(resid_mat)
ggcorrplot(cor_mat)
library("ggcorrplot")
library(ggcorrplot)
ggcorrplot(cor_mat)
length(fit_naive$residuals)
length(fit_naive$residuals)/470
length(fit_naive$residuals)/366
# Fit a naive model not accounting for correlation
fit_naive <- bam(steps ~ s(sind, bs="cr",k=30)
s(sind, by = BMI, bs="cr", k=30),
method="fREML", data=step, discrete=TRUE)
# Fit a naive model not accounting for correlation
fit_naive <- bam(steps ~ s(sind, bs="cr",k=30) +
s(sind, by = BMI, bs="cr", k=30),
method="fREML", data=step, discrete=TRUE)
# Visualize the residuals
resid_mat <- matrix(fit_naive$residuals, length(unique(step$egoid)), 366, byrow=TRUE)
# Visualize the residuals
resid_mat <- matrix(fit_naive$residuals, length(unique(step$egoid[!is.na(step$BMI)])), 366, byrow=TRUE)
View(fit_naive)
# Fit a random functional intercept model
fit_rfi <- bam(steps ~ s(sind, bs="cr",k=30) + College + Gender + Race + Income + weekday +
s(sind, by = BMI, bs="cr", k=30) + s(egoid, by = Phi1, bs="cr", k=30) +
s(egoid, by = Phi2, bs="cr", k=30) + s(egoid, by = Phi3, bs="cr", k=30) +
s(egoid, by = Phi4, bs="cr", k=30), method="fREML", data=step, discrete=TRUE)
# Fit a naive model not accounting for correlation
fit_naive <- bam(steps ~ s(sind, bs="cr",k=30) + College + Gender + Race + Income + weekday +
s(sind, by = BMI, bs="cr", k=30),
method="fREML", data=step, discrete=TRUE)
# Visualize the residuals
resid_mat <- matrix(fit_naive$residuals, length(unique(step$egoid)), 366, byrow=TRUE)
cor_mat <- cor(resid_mat)
ggcorrplot(cor_mat)
# Extract eigenfunctions
step_mat <- as.matrix(step_wide[,-c(1:4)])
Steps_fpca <- fpca.sc(Y = step_mat)
Phi_hat <- Steps_fpca$efunctions
# Include first 4 eigenfunctions in data
N = length(unique(dem$egoid))
step$Phi1 <- rep(Phi_hat[,1], N)
step$Phi2 <- rep(Phi_hat[,2], N)
step$Phi3 <- rep(Phi_hat[,3], N)
step$Phi4 <- rep(Phi_hat[,4], N)
# Fit a random functional intercept model
fit_rfi <- bam(steps ~ s(sind, bs="cr",k=30) + College + Gender + Race + Income + weekday +
s(sind, by = BMI, bs="cr", k=30) + s(egoid, by = Phi1, bs="cr", k=30) +
s(egoid, by = Phi2, bs="cr", k=30) + s(egoid, by = Phi3, bs="cr", k=30) +
s(egoid, by = Phi4, bs="cr", k=30), method="fREML", data=step, discrete=TRUE)
length(fit_rfi$residuals)
length(!is.na(step$steps))
View(step)
length(is.na(step$steps))
length(step$steps[is.na(step$steps)]
length(step$steps[is.na(step$steps)])
length(step$steps[is.na(step$steps)])
length(step$steps[!is.na(step$steps)])
sum(is.na(step$steps))
library(face)
install.packages("face")
library(face)
### fpca model for sparse data
sparse_fpca <- fpca.sparse(Y = step_mat)
### fpca model for sparse data
sparse_fpca <- face.sparse(Y = step_mat)
### fpca model for sparse data
# Transform data
step_sparse = step[,c("md", "egoid", "steps")]
sparse_fpca <- face.sparse(step_sparse)
colnames(step_sparse) = c("argvals", "subj", "y")
sparse_fpca <- face.sparse(step_sparse)
step_sparse <- step_sparse[complete.case(step_sparse),]
step_sparse <- step_sparse[completecase(step_sparse),]
step_sparse <- step_sparse[complete(step_sparse),]
step_sparse <- step_sparse[!is.na(step_sparse$y),]
sparse_fpca <- face.sparse(step_sparse)
